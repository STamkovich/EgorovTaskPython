                                            # Цикл For
                                # Функция range и итерируемые объекты
#  Спомощю функции range() можно сформировать конечную фрифмитическую прогрессию
range(5)  # +1 если до 5
type(range(5))
print(list(range(5)))

print(list(range(10, 21)))  # от кокого до кокого
print(list(range(1, 100, 10)))  # c каким шагом
print(list(range(10, 0, -1)))  # убывающая последовательность
sum(range(1, 101))  # сумма орифметической прогресии
len(range(5, 15, 5))  # количество чисел в последовательности
a, b, c = range(5, 8)  # конструкция множественного присвоения
# обьект который возвращие функцию range() он является ИТЕРИРУЕМЫМ объектом
# ИТЕРИРКЕМЫЙ(ITERiBLE) - Объект, предоставляющий возможность поочередного прохода по своим элементам
v = iter(range(5))  # создали итератор и сохронили в переменную
# к нему можно вызывать функцию next
v.__next__()
# итерируемы объекты позволяют поочерёдно пройтись по всем своим элементам и поддерживают функцию next
# списки являються также интерируемыми
n = iter([43, True, "hello"])
# строки так же итерируемые
m = iter("hi")
# числа являются не итерируемыми объектами
for i in range(4):
    print(i)
                                                # Цикл For
# for <переменная> in <объект>:
#       <тело цикла>
# примеры
for i in range(4):  # i переменная цикла
    print('inside', i)
print('outside', i)
# области применения функции range в цикле for
# 1)
# когда мы в цикле for  обходим с помощю range какую либо заданную нами последлвательность
for i in range(4):
    if i % 2 and i % 7:
        print(i)
# 2)
# повторять какое либо действие определ1нное количество раз
n = int(input())
for i in range(4):
    print("hello")

# вывод случайного числа (нужна функция)
# нужно импортировать  from random import randint
from random import randint
s = 0
n = int(input())
for i in range(5):
    a = randint(1, 10)
    s += a
    print(a, end="")
print()
print(s)

n = int(input())
s = 0
for i in range(n):
    a = int(input())
    s += a
    print("current s", s)
print('total', s)
print("sred arif=", s / n)
# задачки
# Программа принимает на вход натуральное число N.
# Ваша задача вывести на экран все числа от 1 до N каждое число на отдельной строке.
a = int(input())
for i in range(1, a + 1):
    print(i)
# Программа принимает на вход натуральное число N.
# Ваша задача вывести на экран все числа от N до 1 в сторону уменьшения каждое число на отдельной строке.
a = int(input())
for i in range(a, 0, -1):
    print(i)
# Минутка сожаления
# «Надо было брать биткоин в 2012!» именно такую фразу ваша программа должна вывести на экран 13 раз
# Формат входных данных
# Формат выходных данных
# Программа должна вывести 13 раз фразу «Надо было брать биткоин в 2012!», каждый раз на отдельной строке и без кавычек.
a = "Надо было брать биткоин в 2012!"
for i in range(13):
    print(a)
# Каждый, кто смотрел Симпсонов, помнит, что в начале любой серии Барт писал забавные фразы на доске.
# Давайте и мы напишем подобную программу.
# На вход ей будет поступать фраза и затем количество раз, которое эту фразу нужно повторить.
a = input()
b = int(input())
for i in range(b):
    print(a)
# Давайте вспомним задачу FizzBuzz
# Напишите программу, которая считывает два натуральных числа a и b (гарантируется, что a<b),
# после чего для всех чисел от a до b включительно выводит:
# “Fizz”, если это число делится на 3;
# “Buzz”, если это число делится на 5;
# “FizzBuzz”, если выполнены оба предыдущих условия;
# само это число в остальных случаях.
# Формат ввода
# Два числа a и b, каждое на отдельной строке.
# Формат вывода
# Для всех чисел от a до b напечатайте по одной строке, соответствующей правилам, описанным в условии.
a = int(input())
b = int(input())
for i in range(a, b + 1):
    if i % 3 == 0 and i % 5 == 0:
        print("FizzBuzz")
    elif i % 5 == 0:
        print("Buzz")
    elif i % 3 == 0:
        print("Fizz")
    else:
        print(i)
# Квадрат и куб
# Давайте составим сводную информацию о квадратах и кубах интервала чисел.
# На вход программе подается два натуральных числа a и b (гарантируется, что a<b),
# после чего для каждого целого числа на интервале от a до b включительно необходимо вывести фразу следующего вида:
# «Число {число}; его квадрат = {квадрат}; его куб = {куб}»
# Кавычки выводить не нужно и пользуйтесь f-строкой.
# Формат входных данных
# На вход программе подается два натуральных числа a и b, каждое на отдельной строке.
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.
a = int(input())
b = int(input())
for i in range(a, b + 1):
    print(f'Число {i}; его квадрат = {i ** 2}; его куб = {i ** 3}')
# Мишка и игра
# Мишка — маленький белый медвежонок.
# А как известно, маленькие медвежата в свободное время любят играть в кости на шоколадки.
# Одним замечательным солнечным утром, гуляя по льдинам, Мишка встретила своего друга Криса,
# которому и предложила сыграть в эту занимательную игру.
# Правила её очень просты: сначала определяется значение n — количество раундов игры.
# В очередном раунде каждый из игроков один раз бросает стандартный игральный кубик,
# на грани которого нанесены различные числа от 1 до 6. Игрок, выбросивший большее значение,
# становится победителем в раунде. В случае, если выпавшие значения равны, победа не засчитывается никому.
# В самой же игре побеждает участник, выигравший в большем количестве раундов. Если же количества побед,
# заслуженных игроками, равны, то объявляется ничья.
# Мишка ещё совсем маленькая и плохо умеет вести счёт,
# а потому попросила Вас понаблюдать за ходом игры и сообщить ей результат. Помогите ей!
# Входные данные
# В первой строке входных данных содержится число n (1 ≤ n ≤ 100) — количество раундов игры.
# Следующие n строк содержат описание раундов.
# В i-й из них содержится пара целых чисел mi и ci (1 ≤ mi,  ci ≤ 6) —
# результаты бросков Мишки и Криса в i-ом раунде соответственно.
# Выходные данные
# В случае победы Мишки в единственной строке выведите "Mishka" (без кавычек),
# а в случае победы Криса выведите "Chris" (без кавычек).
# Если же игра сведётся к ничьей, то выведите "Friendship is magic!^^" (без кавычек).
n = int(input())  # количество раундов
s, f, k = 0, 0, 0
for i in range(n):
    m, c = map(int, input().split())
    if m > c:
        s += 1
    elif m < c:
        f += 1
    elif m == c:
        k += 1
if s > f:
    print('Mishka')
elif s < f:
    print("Chris")
else:
    print("Friendship is magic!^^")
# Найдите, в каких строках из введённых и в каком месте упоминается "рок", причем регистр букв не важен.
# Вместо явного цикла прохода по строке в цикле используйте подходящий метод строки.
# Формат ввода
# На первой строке вводится натуральное число N — количество строк.
# Далее следуют N строк.
# Формат вывода
# Для каждой строки, в которой есть сочетание символов «рок»,
# нужно вывести (в порядке появления таких строк) номер этой строки (нумерация начинается с единицы) и номер символа,
# с которого начинается первое вхождение этой подстроки (нумерация символов также с единицы).
a = int(input())
for i in range(a):
    b = input().lower()
    if "рок" in b:
        print(i + 1, b.find("рок") + 1)
# Предположим, вы переписываете у друга рецепты в блокнотик, но вам не нравится "соль". Переписывайте без него.
# Формат ввода
# На первой строке вводится натуральное число N — количество пунктов рецепта.
# Далее следуют N строк — пункты рецепта.
# Формат вывода
# Одна строка — пункты рецепта, разделённые запятой и пробелом,
# без пунктов с упоминанием слова "соль" (то есть таких, в которых нет подстроки "соль" в нижнем регистре).
kol_recipe = int(input())
recipe = []
for i in range(kol_recipe):
    b = input()
    if "соль" in b:
        continue
    else:
        recipe.append(b)
    print(', '.join(recipe))
# Кратные 3 или 5
# Если перечислить все натуральные числа ниже 10, которые кратны 3 или 5, то получим 3, 5, 6 и 9. Сумма этих чисел 23.
# Напишите программу, которая принимает натуральное число n и находит сумму всех чисел ниже переданного числа n,
# которые делятся на 3 или на 5.
n = int(input())
sum = 0
for i in range(n - 1, 1, -1):
    if i % 3 == 0 or i % 5 == 0:
        sum = sum + i
print(sum)
# Слишком длинные слова
# Иногда некоторые слова вроде «civilization» или «internationalization» настолько длинны,
# что их весьма утомительно писать много раз в каком либо тексте.
# Будем считать слово слишком длинным, если его длина строго больше 10 символов.
# Все слишком длинные слова можно заменить специальной аббревиатурой.
# Эта аббревиатура строится следующим образом: записывается первая и последняя буква слова,
# а между ними — количество букв между первой и последней буквой (в десятичной системе счисления и без ведущих нулей).
# Таком образом, «civilization» запишется как «c10n», а «internationalization» как «i18n».
# Вам предлагается автоматизировать процесс замены слов на аббревиатуры.
# При этом все слишком длинные слова должны быть заменены аббревиатурой,
# а слова, не являющиеся слишком длинными, должны остаться без изменений.
# Входные данные
# В первой строке содержится целое число n (1 ≤ n ≤ 100).
# В каждой из последующих n строк содержится по одному слову.
# Все слова состоят из малых латинских букв и имеют длину от 1 до 100 символов.
# Выходные данные
# Выведите n строк. В i строке должен находиться результат замены i-го слова из входных данных.
n = int(input())
for i in range(n):
    m = input()
    if len(m) > 10:
        print(m[0] + str(len(m) - 2) + m[-1])
    else:
        print(m)
                                        #  Цикл for. Обход списков и строк
                                        # обход списков и строк
# обход списка по значениям
a = [43, 65, 3, 43, 54, 6]
count = 0
for i in a:
    print(i, a.index(i))
#  обход списка по индексам (является более универсальным способом обхода)
a = [43, 65, 3, 43, 54, 6]
for i in range(6):
    print(i, a[i])

a = [43, 65, 3, 43, 54, 6]
n = len(a)
for i in range(n):
    print(i, a[i])
    a[i] += 5
print(a)
# примеры
a = [1, 2, 3, 4, 32, 4, 5, 3, 5]
b = []
for i in a:
    if not i in b:
        b.append(i)
print(b)

a = [1, 2, 3, 4, 32, 4, 5, 3, 5]
chet = []
nechet = []
n = len(a)
for i in range(n):
    if a[i] % 2 == 0:
        chet.append(i + 1)
    else:
        nechet.append(i)
print(chet)
print(nechet)
                                    # варианты обхода состроками
s = 'hello world'
for i in s:
    print(i)

s = 'Hello World'
for i in s:
    if 'a' <= i <= 'z':
        print(i, "small")
    elif "A" <= i <= "Z":
        print(i, "big")
    else:
        print(i)

vowels = "aeiou"
s = 'aertioorjosikl'
# s[1] --> s[2]
# s[3] --> s[4]
# s[i] --> s[i + 1]
n = len(s)
for i in range(n - 1):
    if s[i] in vowels and s[i + 1] in vowels:
        print(s[i], s[i + 1])

# задачки
# Заполняем список
# Ваша задача создать список из n строк.
# Программа сперва будет принимать натуральное число n, а затем n строк в каждой отдельной строке.
# В качестве ответа выведите получившийся список.
a = int(input())
n = []
for i in range(a):
    b = input()
    n.append(b)
print(n)
# Входные данные
# На первой строке вводится один символ — строчная буква.
# На второй строке вводится предложение.
# Выходные данные
# Нужно вывести список слов (словом считается часть предложения, окружённая символами пустого пространства),
# в которых присутствует введённая буква в любом регистре, в том же порядке, в каком они встречаются в предложении.
a = input()
b = input()
for i in b.split():
    if a in i.lower():
        print(i)

# На вход программе поступает список из целых чисел.
# Ваша задача найти в данном списке наименьшее положительное значение.
# В случае, если положительных значений нет, выведите строку "Empty"
a = list(map(int, input().split()))
b = []
for i in a:
    if i > 0:
        b.append(i)
if len(b) == 0:
    print("Empty")
else:
    print(min(b))

# Напишите программу, которая находит рекордное количество вхождений (не обязательно подряд) символа в строку.
# Формат ввода
# Вводится одна строка.
# Формат вывода
# Выводится одно целое число — максимальное количество раз,
# которое встречается какая-либо буква (без учёта регистра) или иной символ во введённой строке.
a = input().lower()
n = []
for i in a:
    n.append(a.count(i))
print(max(n))
# Делимость на 11
# Для делимости числа на 11 необходимо, чтобы разность между суммой цифр,
# стоящих на четных местах, и суммой цифр, стоящих на нечетных местах, делилась на 11.
# Требуется написать программу, которая проверит делимость заданного числа на 11.
# Входные данные
# Программа получает на вход одно натуральное число N, делимость которого надо проверить (1 ≤ N ≤ 1010000).
# Выходные данные
# Выведите “YES”, если число делится на 11, или “NO” иначе.
a = input()
sum1 = 0
sum2 = 0
for i in range(0, len(a), 2):
    sum1 += int(a[i])
for i in range(1, len(a), 2):
    sum2 += int(a[i])
if abs(sum1 - sum2) % 11 == 0:
    print("YES")
else:
    print("NO")
# На вход программе поддается строка, а ваша задача определить сколько символов в данной строке являются цифрами
# и также найти сумму всех этих цифр.
# Например, в строке "Комната 1408" содержится 4 цифры и их сумма равна 13.
# В качестве ответа необходимо через пробел вывести 2 числа - количество цифр в введенной строке и их сумма
a = list(input())
s = '1234567890'
u = []
for i in a:
     if i in s:
        u.append(int(i))
print(len(u), sum(u))
# Правильная скобочная последовательность
# Наша программа принимает на вход последовательность скобочных символов.
# Ваша задача определить является ли введенная скобочная последовательность правильной.
# Правильная скобочная последовательность (ПСП) называется строка, состоящая только из символов "скобки",
# где каждой закрывающей скобке найдётся соответствующая открывающая (причём того же типа). При этом учитывайте, что:
# Пустая последовательность является правильной.
# Если A – правильная скобочная последовательность, то (A), [A] и {A} – правильные скобочные последовательности.
# Если A и B – правильные скобочные последовательности, то AB – правильная скобочная последовательность.
# Если введенная строка является ПСП, выведите YES, в противном случае - NO.
# вот так вот