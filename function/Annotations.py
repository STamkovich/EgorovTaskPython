# Анотации в Python
# Аннотации - это такой инстремент который позволяет сделать наш код более информативным
# и помогает избавиться от некоторый проблем с денамической типизацией

from typing import List, Dict, Tuple, Optional, Any, Union


def add_naumbers(a: int, b: Optional[int] = None) -> int:
    return a + b

def list_upper(lst: List[str]):
    for elem in lst:
        print(elem.upper())

t: Optional[List] = [1, 2, 3]
e: Any = 12
d: Dict[str, int] = {'a': 100, 'b': 200}
first: int = 100
print(first)
second: int = 200
#  в этом случае аннотации нам помогут сделать так что бы в переменную firt поподали обекты только целого типа
# для этого после переменной ставите двоеточие и указываете как тип в этой переменной хронился

# Аннотации функций
print(add_naumbers(first, second))
print(add_naumbers("hello", 'wirld'))
print(add_naumbers([1, 2, 5], [1, 4]))
#  что бы посмотреть где хроняться наши аннотации в функции
print(add_naumbers.__annotations__)
# так же можно аннонсировать из фунции что она возвращавет(тоеть тип значения который возвращается в return
# нужно в поле обявления всех аргументов в функции нужно написать дефиз + стрелочка вправо и указать тип
#  так же аннотации как и коментарии не яаляются не явлюються обязательным инструментом
# Аннотации являеться признаком хорошего тона))

# Аннотации ещё полезны в случае нашей функции list_upper
# нужно импортировать from import (тип который нам интересен)
# также нужно указать какого типа нужно хронить элементы в нашем списке

# так в модуле typing есть три полезные штуки Tuple, Optional(переменная может быть пустой или целого типа,
# Any(в переменную можно записывать любой тип, Union(объеденять несколько типов)